using System;
using System.ComponentModel;
using System.Windows.Threading;
using MS.Internal;

namespace System.Windows.Data
{
	/// <summary>Common base class and contract for <see cref="T:System.Windows.Data.DataSourceProvider" /> objects, which are factories that execute some queries to produce a single object or a list of objects that you can use as binding source objects.</summary>
	// Token: 0x02000199 RID: 409
	public abstract class DataSourceProvider : INotifyPropertyChanged, ISupportInitialize
	{
		/// <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.DataSourceProvider" /> class. This is a protected constructor.</summary>
		// Token: 0x0600108D RID: 4237 RVA: 0x0003AB65 File Offset: 0x00038D65
		protected DataSourceProvider()
		{
			this._dispatcher = Dispatcher.CurrentDispatcher;
		}

		/// <summary>Starts the initial query to the underlying data model. The result is returned on the <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> property.</summary>
		// Token: 0x0600108E RID: 4238 RVA: 0x0003AB7F File Offset: 0x00038D7F
		public void InitialLoad()
		{
			if (!this.IsInitialLoadEnabled || this._initialLoadCalled)
			{
				return;
			}
			this._initialLoadCalled = true;
			this.BeginQuery();
		}

		/// <summary>Initiates a refresh operation to the underlying data model. The result is returned on the <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> property.</summary>
		// Token: 0x0600108F RID: 4239 RVA: 0x0003AB9F File Offset: 0x00038D9F
		public void Refresh()
		{
			this._initialLoadCalled = true;
			this.BeginQuery();
		}

		/// <summary>Gets or sets a value that indicates whether to prevent or delay the automatic loading of data.</summary>
		/// <returns>
		///     <see langword="false" /> to prevent or delay the automatic loading of data; otherwise, <see langword="true" />. The default value is <see langword="true" />.</returns>
		// Token: 0x1700033B RID: 827
		// (get) Token: 0x06001090 RID: 4240 RVA: 0x0003ABAE File Offset: 0x00038DAE
		// (set) Token: 0x06001091 RID: 4241 RVA: 0x0003ABB6 File Offset: 0x00038DB6
		[DefaultValue(true)]
		public bool IsInitialLoadEnabled
		{
			get
			{
				return this._isInitialLoadEnabled;
			}
			set
			{
				this._isInitialLoadEnabled = value;
				this.OnPropertyChanged(new PropertyChangedEventArgs("IsInitialLoadEnabled"));
			}
		}

		/// <summary>Gets the underlying data object.</summary>
		/// <returns>A value of type <see cref="T:System.Object" /> that is the underlying data object.</returns>
		// Token: 0x1700033C RID: 828
		// (get) Token: 0x06001092 RID: 4242 RVA: 0x0003ABCF File Offset: 0x00038DCF
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public object Data
		{
			get
			{
				return this._data;
			}
		}

		/// <summary>Occurs when the <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> property has a new value.</summary>
		// Token: 0x1400002B RID: 43
		// (add) Token: 0x06001093 RID: 4243 RVA: 0x0003ABD8 File Offset: 0x00038DD8
		// (remove) Token: 0x06001094 RID: 4244 RVA: 0x0003AC10 File Offset: 0x00038E10
		public event EventHandler DataChanged;

		/// <summary>Gets the error of the last query operation.</summary>
		/// <returns>A value of type <see cref="T:System.Exception" /> that is the error of the last query operation, or <see langword="null" /> if there was no error.</returns>
		// Token: 0x1700033D RID: 829
		// (get) Token: 0x06001095 RID: 4245 RVA: 0x0003AC45 File Offset: 0x00038E45
		public Exception Error
		{
			get
			{
				return this._error;
			}
		}

		/// <summary>Enters a defer cycle that you can use to change properties of the provider and delay automatic refresh.</summary>
		/// <returns>An <see cref="T:System.IDisposable" /> object that you can use to dispose of the calling object.</returns>
		// Token: 0x06001096 RID: 4246 RVA: 0x0003AC4D File Offset: 0x00038E4D
		public virtual IDisposable DeferRefresh()
		{
			this._deferLevel++;
			return new DataSourceProvider.DeferHelper(this);
		}

		/// <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
		// Token: 0x06001097 RID: 4247 RVA: 0x0003AC63 File Offset: 0x00038E63
		void ISupportInitialize.BeginInit()
		{
			this.BeginInit();
		}

		/// <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
		// Token: 0x06001098 RID: 4248 RVA: 0x0003AC6B File Offset: 0x00038E6B
		void ISupportInitialize.EndInit()
		{
			this.EndInit();
		}

		/// <summary>Occurs when a property value changes.</summary>
		// Token: 0x1400002C RID: 44
		// (add) Token: 0x06001099 RID: 4249 RVA: 0x0003AC73 File Offset: 0x00038E73
		// (remove) Token: 0x0600109A RID: 4250 RVA: 0x0003AC7C File Offset: 0x00038E7C
		event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
		{
			add
			{
				this.PropertyChanged += value;
			}
			remove
			{
				this.PropertyChanged -= value;
			}
		}

		/// <summary>Gets a value that indicates whether there is an outstanding <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> in use.</summary>
		/// <returns>
		///     <see langword="true" /> if there is an outstanding <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> in use; otherwise, <see langword="false" />.</returns>
		// Token: 0x1700033E RID: 830
		// (get) Token: 0x0600109B RID: 4251 RVA: 0x0003AC85 File Offset: 0x00038E85
		protected bool IsRefreshDeferred
		{
			get
			{
				return this._deferLevel > 0 || (!this.IsInitialLoadEnabled && !this._initialLoadCalled);
			}
		}

		/// <summary>Gets or sets the current <see cref="T:System.Windows.Threading.Dispatcher" /> object to the UI thread to use.</summary>
		/// <returns>The current <see cref="T:System.Windows.Threading.Dispatcher" /> object to the UI thread to use. By default, this is the <see cref="T:System.Windows.Threading.Dispatcher" /> object that is associated with the thread on which this instance was created.</returns>
		// Token: 0x1700033F RID: 831
		// (get) Token: 0x0600109C RID: 4252 RVA: 0x0003ACA5 File Offset: 0x00038EA5
		// (set) Token: 0x0600109D RID: 4253 RVA: 0x0003ACAD File Offset: 0x00038EAD
		protected Dispatcher Dispatcher
		{
			get
			{
				return this._dispatcher;
			}
			set
			{
				if (this._dispatcher != value)
				{
					this._dispatcher = value;
				}
			}
		}

		/// <summary>When overridden in a derived class, this base class calls this method when <see cref="M:System.Windows.Data.DataSourceProvider.InitialLoad" /> or <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> has been called. The base class delays the call if refresh is deferred or initial load is disabled.</summary>
		// Token: 0x0600109E RID: 4254 RVA: 0x00006BD7 File Offset: 0x00004DD7
		protected virtual void BeginQuery()
		{
		}

		/// <summary>Derived classes call this method to indicate that a query has finished.</summary>
		/// <param name="newData">The data that is the result of the query.</param>
		// Token: 0x0600109F RID: 4255 RVA: 0x0003ACBF File Offset: 0x00038EBF
		protected void OnQueryFinished(object newData)
		{
			this.OnQueryFinished(newData, null, null, null);
		}

		/// <summary>Derived classes call this method to indicate that a query has finished.</summary>
		/// <param name="newData">The data that is the result of the query.</param>
		/// <param name="error">The error that occurred while running the query. This value is <see langword="null" /> if there is no error.</param>
		/// <param name="completionWork">Optional delegate that is used to execute completion work on the UI thread, for example, to set additional properties.</param>
		/// <param name="callbackArguments">Optional arguments to send as a parameter with the <paramref name="completionWork" /> delegate.</param>
		// Token: 0x060010A0 RID: 4256 RVA: 0x0003ACCC File Offset: 0x00038ECC
		protected virtual void OnQueryFinished(object newData, Exception error, DispatcherOperationCallback completionWork, object callbackArguments)
		{
			Invariant.Assert(this.Dispatcher != null);
			if (this.Dispatcher.CheckAccess())
			{
				this.UpdateWithNewResult(error, newData, completionWork, callbackArguments);
				return;
			}
			this.Dispatcher.BeginInvoke(DispatcherPriority.Normal, DataSourceProvider.UpdateWithNewResultCallback, new object[]
			{
				this,
				error,
				newData,
				completionWork,
				callbackArguments
			});
		}

		/// <summary>Occurs when a property value changes.</summary>
		// Token: 0x1400002D RID: 45
		// (add) Token: 0x060010A1 RID: 4257 RVA: 0x0003AD30 File Offset: 0x00038F30
		// (remove) Token: 0x060010A2 RID: 4258 RVA: 0x0003AD68 File Offset: 0x00038F68
		protected virtual event PropertyChangedEventHandler PropertyChanged;

		/// <summary>Raises the <see cref="E:System.Windows.Data.DataSourceProvider.PropertyChanged" /> event with the provided arguments.</summary>
		/// <param name="e">Arguments of the event being raised.</param>
		// Token: 0x060010A3 RID: 4259 RVA: 0x0003AD9D File Offset: 0x00038F9D
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, e);
			}
		}

		/// <summary>Indicates that initialization of this object is about to begin; no implicit <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> occurs until the matched <see cref="M:System.Windows.Data.DataSourceProvider.EndInit" /> method is called.</summary>
		// Token: 0x060010A4 RID: 4260 RVA: 0x0003ADB4 File Offset: 0x00038FB4
		protected virtual void BeginInit()
		{
			this._deferLevel++;
		}

		/// <summary>Indicates that the initialization of this object has completed; this causes a <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> if no other <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> is outstanding.</summary>
		// Token: 0x060010A5 RID: 4261 RVA: 0x0003ADC4 File Offset: 0x00038FC4
		protected virtual void EndInit()
		{
			this.EndDefer();
		}

		// Token: 0x060010A6 RID: 4262 RVA: 0x0003ADCC File Offset: 0x00038FCC
		private void EndDefer()
		{
			this._deferLevel--;
			if (this._deferLevel == 0)
			{
				this.Refresh();
			}
		}

		// Token: 0x060010A7 RID: 4263 RVA: 0x0003ADEC File Offset: 0x00038FEC
		private static object UpdateWithNewResult(object arg)
		{
			object[] array = (object[])arg;
			Invariant.Assert(array.Length == 5);
			DataSourceProvider dataSourceProvider = (DataSourceProvider)array[0];
			Exception error = (Exception)array[1];
			object newData = array[2];
			DispatcherOperationCallback completionWork = (DispatcherOperationCallback)array[3];
			object callbackArgs = array[4];
			dataSourceProvider.UpdateWithNewResult(error, newData, completionWork, callbackArgs);
			return null;
		}

		// Token: 0x060010A8 RID: 4264 RVA: 0x0003AE40 File Offset: 0x00039040
		private void UpdateWithNewResult(Exception error, object newData, DispatcherOperationCallback completionWork, object callbackArgs)
		{
			bool flag = this._error != error;
			this._error = error;
			if (error != null)
			{
				newData = null;
				this._initialLoadCalled = false;
			}
			this._data = newData;
			if (completionWork != null)
			{
				completionWork(callbackArgs);
			}
			this.OnPropertyChanged(new PropertyChangedEventArgs("Data"));
			if (this.DataChanged != null)
			{
				this.DataChanged(this, EventArgs.Empty);
			}
			if (flag)
			{
				this.OnPropertyChanged(new PropertyChangedEventArgs("Error"));
			}
		}

		// Token: 0x040012C5 RID: 4805
		private bool _isInitialLoadEnabled = true;

		// Token: 0x040012C6 RID: 4806
		private bool _initialLoadCalled;

		// Token: 0x040012C7 RID: 4807
		private int _deferLevel;

		// Token: 0x040012C8 RID: 4808
		private object _data;

		// Token: 0x040012C9 RID: 4809
		private Exception _error;

		// Token: 0x040012CA RID: 4810
		private Dispatcher _dispatcher;

		// Token: 0x040012CB RID: 4811
		private static readonly DispatcherOperationCallback UpdateWithNewResultCallback = new DispatcherOperationCallback(DataSourceProvider.UpdateWithNewResult);

		// Token: 0x02000356 RID: 854
		private class DeferHelper : IDisposable
		{
			// Token: 0x06001A2E RID: 6702 RVA: 0x0004F111 File Offset: 0x0004D311
			public DeferHelper(DataSourceProvider provider)
			{
				this._provider = provider;
			}

			// Token: 0x06001A2F RID: 6703 RVA: 0x0004F120 File Offset: 0x0004D320
			public void Dispose()
			{
				GC.SuppressFinalize(this);
				if (this._provider != null)
				{
					this._provider.EndDefer();
					this._provider = null;
				}
			}

			// Token: 0x04001BD5 RID: 7125
			private DataSourceProvider _provider;
		}
	}
}
